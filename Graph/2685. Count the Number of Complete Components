class Solution {
    public int countCompleteComponents(int n, int[][] edges) {
        if(edges==null || n==0) return 0;

        ArrayList<Integer>[] adj=new ArrayList[n];
        for(int i=0;i<n;i++) adj[i]=new ArrayList<>();

        for(int[] edge:edges){
            adj[edge[0]].add(edge[1]);
            adj[edge[1]].add(edge[0]);
        }

        boolean[] visited=new boolean[n];
        int ans=0;
        for(int i=0;i<n;i++){
            if(!visited[i]){
                int[] value=new int[2];
                dfs(i , adj, visited , value);
                //checking if number of edges in a complete graph of n nodes is equal to optained edges
                //for complete graph formula is nC2 = n(n-1)/2;
                if(value[0]*(value[0]-1) == value[1]) ans++;
            }
        }
        return ans;
    }
    private void dfs(int node , ArrayList<Integer>[] adj , boolean[] visited ,int[] value){
        visited[node]=true;
        value[0]++;
        value[1]+=adj[node].size();
        for(int adjNode:adj[node]){
            if(!visited[adjNode]){
                dfs(adjNode , adj , visited , value);
            }
        }
    }
}
